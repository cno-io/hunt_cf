{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "    AWS CloudFormation Template for AWS Hunt Lab ",
    "Mappings": {
        "PrivateRegionMap": {
            "us-east-2": {
                "AMI": "ami-0255fb45a92df418d"
            }
        },
        "PublicRegionMap": {
            "us-east-2": {
                "AMI": "ami-6a003c0f"
            }
        }
    },
    "Outputs": {
        "PublicIP": {
            "Description": "IP Address of Public Instance",
            "Value": {
                "Fn::GetAtt": [
                    "PublichuntlizardInstance",
                    "PublicIp"
                ]
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "t2.micro",
            "Description": "WebServer EC2 instance type",
            "Type": "String"
        },
        "KeyName": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to     the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to SSH to the EC2     instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        }
    },
    "Resources": {
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "BucketPolicy": {
            "DependsOn": [
                "S3Bucket"
            ],
            "Properties": {
                "Bucket": {
                    "Ref": "S3Bucket"
                },
                "PolicyDocument": {
                    "Id": "EnforceServersideEncryption",
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "cloudtrail.amazonaws.com"
                                ]
                            },
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "PermitCTBucketPut"
                        },
                        {
                            "Action": [
                                "s3:GetBucketAcl"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "cloudtrail.amazonaws.com"
                                ]
                            },
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "PermitCTBucketACLRead"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::S3::BucketPolicy"
        },
        "CloudTrail": {
            "DependsOn": [
                "BucketPolicy"
            ],
            "Properties": {
                "IncludeGlobalServiceEvents": "true",
                "IsLogging": "true",
                "IsMultiRegionTrail": "true",
                "S3BucketName": {
                    "Ref": "S3Bucket"
                }
            },
            "Type": "AWS::CloudTrail::Trail"
        },
        "InstanceProfile": {
            "Properties": {
                "InstanceProfileName": "huntlizardInstanceRole",
                "Roles": [
                    {
                        "Ref": "huntlizardEC2Role"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "InstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "huntlizardSecurityGroup",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "8080",
                        "IpProtocol": "tcp",
                        "ToPort": "8080"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "8000",
                        "IpProtocol": "tcp",
                        "ToPort": "8000"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "5000",
                        "IpProtocol": "tcp",
                        "ToPort": "5000"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "5001",
                        "IpProtocol": "tcp",
                        "ToPort": "5001"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "8081",
                        "IpProtocol": "tcp",
                        "ToPort": "8081"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "1080",
                        "IpProtocol": "tcp",
                        "ToPort": "1080"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": "10.0.0.0/8",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardInternetGateway"
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "PrivInstanceProfile": {
            "Properties": {
                "InstanceProfileName": "huntlizardPrivInstanceRole",
                "Roles": [
                    {
                        "Ref": "huntlizardPrivEC2Role"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "PrivatehuntlizardInstance": {
            "Properties": {
                "IamInstanceProfile": "huntlizardPrivInstanceRole",
                "ImageId": {
                    "Fn::FindInMap": [
                        "PrivateRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "InstanceSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "huntlizardSubnetPublic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardPrivateInstance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": "#!/bin/bash\necho \"START\" > /tmp/userdata001.txt\nid >> /tmp/userdata001.txt\nuname -a >> /tmp/userdata001.txt\n#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n#sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n#sudo apt-get update\n#apt-cache policy docker-ce\n#sudo apt-get install -y docker-ce\nsudo docker run --restart=always -d -p 8080:8080 cnoio/nbvulns001\nsudo docker run --restart=always -d -v /home/ubuntu:/home/ubuntu:ro --privileged -p 5000:5000 cnoio/nbvulns002\nsudo docker run --restart=always -d -p 8000:8000 cnoio/nbvulns003\nsudo docker run --restart=always -d -p 8081:8081 cnoio/nbvulns004\nsudo docker run --restart=always -d -v /home/ubuntu:/home/ubuntu:ro --privileged -p 5001:5001 cnoio/nbvulns005\necho \"END\" >> /tmp/userdata001.txt\n"
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "PublichuntlizardInstance": {
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "PublicRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "InstanceSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "huntlizardSubnetPublic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardPublicInstance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": "#!/bin/bash\necho \"START\" > /tmp/userdata001.txt\nid >> /tmp/userdata001.txt\nuname -a >> /tmp/userdata001.txt\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\nsudo echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ xenial main\" > /etc/apt/sources.list.d/azure-cli.list\ncurl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\nsudo apt-get update\napt-cache policy docker-ce\nsudo apt-get install -y docker-ce\nsudo apt-get install -y nmap\nsudo apt-get install -y awscli\nsudo apt-get install -y python\nsudo apt-get install -y python-pip\nsudo pip install flask\nsudo pip install boto3\nsudo apt-get install -y john\nsudo apt-get install -y binwalk\nsudo apt-get install -y virtualenv\nsudo apt-get install -y git\nsudo mkdir /shared\nsudo git clone https://github.com/cno-io/bh_shared.git /shared\nsudo mkdir -p /shared/lists/\nsudo mkdir -p /shared/spider/\nsudo mkdir -p /shared/lookups/\nsudo mkdir -p /root/.aws/\nsudo mkdir -p /root/.principalmap/\nsudo chmod 700 /shared/lookups/nslookups.sh\nsudo chmod 700 /shared/other/bashrc.sh\nsudo echo \"source /shared/other/bashrc.sh\" >> /root/.bashrc\necho \"$(ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}') $(hostname)\" >> /tmp/userdata001.txt\necho \"$(ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}') $(hostname)\" | sudo tee --append /etc/hosts\necho \"END\" >> /tmp/userdata001.txt\n"
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Route": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "RouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardRouteTable"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "S3Bucket": {
            "DeletionPolicy": "Retain",
            "Type": "AWS::S3::Bucket"
        },
        "SubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "huntlizardSubnetPublic"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "huntlizardEC2Role": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/ReadOnlyAccess"
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "huntlizardPrivEC2Role": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/ReadOnlyAccess"
                ],
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:CreateSnapshot",
                                        "ec2:ModifySnapshotAttribute"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ],
                                    "Sid": "PermitEC2Snapshots"
                                }
                            ]
                        },
                        "PolicyName": "EC2SnapshotPermissions"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "huntlizardSubnetPrivate": {
            "Properties": {
                "CidrBlock": "10.0.2.0/24",
                "MapPublicIpOnLaunch": "false",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardSubnet_private"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "huntlizardSubnetPublic": {
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "huntlizardSubnet_public"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        }
    }
}
